#
# Copyright 2018, Cypress Semiconductor Corporation or a subsidiary of 
 # Cypress Semiconductor Corporation. All Rights Reserved.
 # This software, including source code, documentation and related
 # materials ("Software"), is owned by Cypress Semiconductor Corporation
 # or one of its subsidiaries ("Cypress") and is protected by and subject to
 # worldwide patent protection (United States and foreign),
 # United States copyright laws and international treaty provisions.
 # Therefore, you may use this Software only as provided in the license
 # agreement accompanying the software package from which you
 # obtained this Software ("EULA").
 # If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 # non-transferable license to copy, modify, and compile the Software
 # source code solely for use in connection with Cypress's
 # integrated circuit products. Any reproduction, modification, translation,
 # compilation, or representation of this Software except as specified
 # above is prohibited without the express written permission of Cypress.
 #
 # Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 # EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
 # WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
 # reserves the right to make changes to the Software without notice. Cypress
 # does not assume any liability arising out of the application or use of the
 # Software or any product or circuit described in the Software. Cypress does
 # not authorize its products for use in any products where a malfunction or
 # failure of the Cypress product may reasonably be expected to result in
 # significant property damage, injury or death ("High Risk Product"). By
 # including Cypress's product in a High Risk Product, the manufacturer
 # of such system or application assumes all risk of such use and in doing
 # so agrees to indemnify Cypress against all liability.
#

# This wrapper is for easier porting of DDR script provided by ASIC.
proc hexpr { args } {
   return 0x[format %llx [uplevel expr $args]]
}

# Register read/write
# This wrapper is for easier porting of DDR script provided by ASIC
# Wrapper does not support all original 'pci' procedure options, so be careful.
proc pci { operation address {size 4} {data 0} } {
   if {$operation == "w"} {
       mww $address $data
   } else {
       set res [hexpr [memread32 $address]]
       return $res
   }
}

#Reset DDR Block and turn on clocks.
proc program_ddrcore_reset { } {

set ht_mask 0x30081377
set max_res_mask_reg_addr 0x1802061c
set max_res_mask_reg_rdata  [pci r $max_res_mask_reg_addr]
set max_res_mask_reg_data [hexpr $max_res_mask_reg_rdata | $ht_mask]
pci w $max_res_mask_reg_addr 4 $max_res_mask_reg_data

sleep 10

pci w 0x1810b800 4 0x1  ;# turn on resetn
pci w 0x1810b408 4 0x3  ;# turn on clocks
pci w 0x1810b800 4 0x0  ;# turn off resetn
pci w 0x1810b408 4 0x1  ;# turn off force clock

sleep 10

}

#Turn the pads RX on and enable termination
proc program_ddrcore_pads { } {

pci w 0x1800b048 4 0x0         ;# turn on Termination and RX of pads on
pci w 0x1800b04c 4 0x01010101  ;# turn on Termination and RX of pads on

}
